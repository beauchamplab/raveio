% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-variable-collection.R
\name{new_variable_collection}
\alias{new_variable_collection}
\title{Create a collection of constraint variables}
\usage{
new_variable_collection(name = "", explicit = TRUE, r6_def = NULL)
}
\arguments{
\item{name}{collection name, default is empty}

\item{explicit}{whether setting and getting variables should be explicit,
default is \code{TRUE}, which means trying to get undefined variables
will result in errors}

\item{r6_def}{\code{R6} class generator; default is
\code{\link{RAVEVariableCollection}}. This input is for class definitions
that are child classes of \code{RAVEVariableCollection}.}
}
\value{
A \code{RAVEVariableCollectionWrapper} instance
}
\description{
Create a collection of constraint variables
}
\examples{

collection <- new_variable_collection()

# Add unconstrained variables
collection$add_variable(id = "title", "Voltage traces")

# Add a variable with placeholder
collection$add_variable(id = "time_points")

# Add variable with constraints
collection$add_variable(
  id = "analysis_range",
  var = new_constrained_variable(
    name = "Analysis range",
    initial_value = c(0, 1),
    constraints = "numeric",
    any.missing = FALSE,
    len = 2,
    sorted = TRUE,
    null.ok = FALSE
  )
)

collection$use_constraints(quote({
  # `x` is the list of values
  time_range <- range(.x$time_points, na.rm = TRUE)
  if(
    .x$analysis_range[[1]] >= time_range[[1]] &&
    .x$analysis_range[[2]] <= time_range[[2]]
  ) {
    # valid
    re <- TRUE
  } else {

    # error message
    re <- sprintf(
      "Invalid analysis range, must be within [\%.2f, \%.2f]",
      time_range[[1]], time_range[[2]]
    )
  }

  re
}))


collection$set_value("time_points", seq(-1, 10, by = 0.5))

# validation will pass
collection$validate()

# Get variable values
collection$as_list()
collection[]

# get one variable
collection$get_value("analysis_range")

# get unregistered variable
collection$get_value("unregistered_variable")

# get partial variables with single `[`
collection["title", "analysis_range"]
collection[c("title", "analysis_range")]

collection$set_value("analysis_range", c(-2, 5))

\dontrun{
collection$validate()

# error out when explicit, please either
# set explicit=TRUE or register the variable via $add_variable
collection$set_value("unregistered_variable", 1)

}

# turn off explicit variable option
collection$explicit <- FALSE
collection$set_value("unregistered_variable", 1)
collection$get_value("unregistered_variable")


}
