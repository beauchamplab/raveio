% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-variable-collection.R
\name{RAVEVariableCollection}
\alias{RAVEVariableCollection}
\title{Class definition of 'RAVE' constrained variable collection}
\value{
Formatted characters

Self

The removed variable

\code{TRUE} if found, otherwise \code{FALSE}

Self

The variable value if variable if found and
\code{get_definition} is false; or the variable definition if variable
is found and is \code{RAVEVariable} or \code{RAVEVariableCollection};
or \code{ifnotfound} if the variable does not exist

The variable values in list

Nothing

\code{TRUE} if valid, or raises errors by default

\code{TRUE} if valid, otherwise returns the error message

A list of constraint data that can be passed into
\code{$restore} method

\code{RAVEVariableCollection} instance
}
\description{
See \code{\link{new_variable_collection}} for construction
}
\seealso{
\code{\link{RAVEVariable}}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{explicit}}{whether getting and setting values should be explicit.
If true, then all variables must be defined (see \code{$add_variable})
before used.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{.wrapper}}{wrapper instance of current variable collection}

\item{\code{generator}}{class definition}

\item{\code{isRAVEVariableCollection}}{always true}

\item{\code{variables}}{map containing the variable definitions}

\item{\code{varnames}}{variable names}

\item{\code{name}}{descriptive name of the collection}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RAVEVariableCollection-new}{\code{RAVEVariableCollection$new()}}
\item \href{#method-RAVEVariableCollection-format}{\code{RAVEVariableCollection$format()}}
\item \href{#method-RAVEVariableCollection-add_variable}{\code{RAVEVariableCollection$add_variable()}}
\item \href{#method-RAVEVariableCollection-remove_variable}{\code{RAVEVariableCollection$remove_variable()}}
\item \href{#method-RAVEVariableCollection-has_variable}{\code{RAVEVariableCollection$has_variable()}}
\item \href{#method-RAVEVariableCollection-set_value}{\code{RAVEVariableCollection$set_value()}}
\item \href{#method-RAVEVariableCollection-get_value}{\code{RAVEVariableCollection$get_value()}}
\item \href{#method-RAVEVariableCollection-as_list}{\code{RAVEVariableCollection$as_list()}}
\item \href{#method-RAVEVariableCollection-use_constraints}{\code{RAVEVariableCollection$use_constraints()}}
\item \href{#method-RAVEVariableCollection-validate}{\code{RAVEVariableCollection$validate()}}
\item \href{#method-RAVEVariableCollection-check}{\code{RAVEVariableCollection$check()}}
\item \href{#method-RAVEVariableCollection-store}{\code{RAVEVariableCollection$store()}}
\item \href{#method-RAVEVariableCollection-restore}{\code{RAVEVariableCollection$restore()}}
\item \href{#method-RAVEVariableCollection-clone}{\code{RAVEVariableCollection$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-new"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-new}{}}}
\subsection{Method \code{new()}}{
Constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$new(name = "", explicit = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{descriptive name of the collection}

\item{\code{explicit}}{see field \code{explicit}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-format"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-format}{}}}
\subsection{Method \code{format()}}{
Format method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$format(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-add_variable"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-add_variable}{}}}
\subsection{Method \code{add_variable()}}{
Registers a variable, must run if the collection is explicit
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$add_variable(id, var)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{variable 'ID'}

\item{\code{var}}{a \code{\link{RAVEVariable}} or \code{RAVEVariableCollection}
instance if the variable is bounded, or simply normal R object (
then the variable will have no constraint)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-remove_variable"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-remove_variable}{}}}
\subsection{Method \code{remove_variable()}}{
Remove a variable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$remove_variable(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{variable 'ID'}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-has_variable"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-has_variable}{}}}
\subsection{Method \code{has_variable()}}{
Check whether a variable exists
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$has_variable(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{variable 'ID'}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-set_value"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-set_value}{}}}
\subsection{Method \code{set_value()}}{
Set value of a variable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$set_value(id, value, env = parent.frame(), ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{variable 'ID'}

\item{\code{value}}{the value to be set}

\item{\code{env, ...}}{passed to \code{RAVEVariable$set_value}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-get_value"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-get_value}{}}}
\subsection{Method \code{get_value()}}{
Get value of a variable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$get_value(
  id,
  env = parent.frame(),
  get_definition = FALSE,
  ifnotfound = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{variable 'ID'}

\item{\code{env}}{environment of evaluation}

\item{\code{get_definition}}{whether to return the variable definition instance
(\code{RAVEVariable} or \code{RAVEVariableCollection}) instead
of the value; default is false}

\item{\code{ifnotfound}}{default value if not found; default is \code{NULL}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-as_list"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-as_list}{}}}
\subsection{Method \code{as_list()}}{
Convert to list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$as_list(env = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{environment of evaluation}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-use_constraints"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-use_constraints}{}}}
\subsection{Method \code{use_constraints()}}{
Set collection validation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$use_constraints(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{either a \code{NULL} or an expression with global variables
\code{x}, \code{self}, \code{private}, and \code{defs}
Mainly used to validate the values of multiple variables (some
variables are dependent or bounded by other variables)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-validate"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-validate}{}}}
\subsection{Method \code{validate()}}{
Run validation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$validate(
  env = parent.frame(),
  on_error = c("error", "warning", "message", "muffle")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{environment to evaluate validation expressions}

\item{\code{on_error}}{character, error handler}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-check"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-check}{}}}
\subsection{Method \code{check()}}{
Check if the value is valid with no error raised
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$check(env = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{environment to evaluate validation expressions}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-store"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-store}{}}}
\subsection{Method \code{store()}}{
Convert constraint to atomic list, used for serializing
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$store(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-restore"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-restore}{}}}
\subsection{Method \code{restore()}}{
Restores from atomic list generated by \code{$store()}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$restore(x, env = parent.frame(), clear = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{atomic list}

\item{\code{env}}{environment where to query the class definitions}

\item{\code{clear}}{whether to clear the current variables; default is false}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableCollection-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableCollection-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableCollection$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
