% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-variable-constraint.R
\name{RAVEVariable}
\alias{RAVEVariable}
\title{Class definition of 'RAVE' constrained variable}
\value{
Formatted characters

Self instance

Self

Current value

See \code{\link{RAVEVariableConstraints}}

\code{TRUE} if valid, otherwise returns the error message

A list of constraint data that can be passed into
\code{$restore} method

\code{RAVEVariable} instance
}
\description{
See \code{\link{new_constrained_variable}} for constructor function.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{Description of the variable}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{constraints}}{instance of \code{\link{RAVEVariableConstraints}},
used to validate the input}

\item{\code{isRAVEVariable}}{always true}

\item{\code{type}}{constraint type}

\item{\code{value}}{value of the variable}

\item{\code{initialized}}{whether value is missing (value might not be valid)}

\item{\code{generator}}{class definition}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RAVEVariable-new}{\code{RAVEVariable$new()}}
\item \href{#method-RAVEVariable-format}{\code{RAVEVariable$format()}}
\item \href{#method-RAVEVariable-use_constraints}{\code{RAVEVariable$use_constraints()}}
\item \href{#method-RAVEVariable-set_value}{\code{RAVEVariable$set_value()}}
\item \href{#method-RAVEVariable-get_value}{\code{RAVEVariable$get_value()}}
\item \href{#method-RAVEVariable-validate}{\code{RAVEVariable$validate()}}
\item \href{#method-RAVEVariable-check}{\code{RAVEVariable$check()}}
\item \href{#method-RAVEVariable-store}{\code{RAVEVariable$store()}}
\item \href{#method-RAVEVariable-restore}{\code{RAVEVariable$restore()}}
\item \href{#method-RAVEVariable-clone}{\code{RAVEVariable$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariable-new"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariable-new}{}}}
\subsection{Method \code{new()}}{
Constructor function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariable$new(name = "Unnamed", initial_value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{description of the variable}

\item{\code{initial_value}}{initial value; default is an empty list of class
\code{"key_missing"}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariable-format"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariable-format}{}}}
\subsection{Method \code{format()}}{
Format method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariable$format(prefix = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prefix}}{prefix of the string}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariable-use_constraints"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariable-use_constraints}{}}}
\subsection{Method \code{use_constraints()}}{
Set variable validation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariable$use_constraints(constraints, .i, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{constraints}}{either a \code{character(1)} or a
\code{\link{RAVEVariableConstraints}} instance. When \code{constraints}
is a string, the value will be the \code{type} of the constraint (
see \code{\link{new_constraints}})}

\item{\code{.i, ...}}{used when \code{constraints} is a string, either \code{.i}
is an expression, or \code{list(.i,...)} forms a list of control
parameters; see \code{assertions} in \code{\link{new_constraints}}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariable-set_value"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariable-set_value}{}}}
\subsection{Method \code{set_value()}}{
Set value
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariable$set_value(
  x,
  env = parent.frame(),
  validate = TRUE,
  on_error = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{value of the variable}

\item{\code{env}}{environment in which the validations will be evaluated}

\item{\code{validate}}{whether to validate if \code{x} is legit; if set to
\code{TRUE} and \code{x} is invalid, then the values will not be set.}

\item{\code{on_error}}{a function takes two arguments: the error instance and
old value; the returned value will be used to re-validate.
Default is \code{NULL}, which is identical to returning the old value
and stop on error.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariable-get_value"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariable-get_value}{}}}
\subsection{Method \code{get_value()}}{
Get value
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariable$get_value(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariable-validate"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariable-validate}{}}}
\subsection{Method \code{validate()}}{
Check if the value is valid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariable$validate(
  env = parent.frame(),
  on_error = c("error", "warning", "message", "muffle")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env, on_error}}{passed to
\code{RAVEVariableConstraints$assert}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariable-check"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariable-check}{}}}
\subsection{Method \code{check()}}{
Check if the value is valid with no error raised
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariable$check(env = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{environment to evaluate validation expressions}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariable-store"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariable-store}{}}}
\subsection{Method \code{store()}}{
Convert constraint to atomic list, used for serializing
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariable$store(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariable-restore"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariable-restore}{}}}
\subsection{Method \code{restore()}}{
Restores from atomic list generated by \code{$store()}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariable$restore(x, env = parent.frame(), ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{atomic list}

\item{\code{env}}{environment where to query the class definitions}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariable-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariable-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariable$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
