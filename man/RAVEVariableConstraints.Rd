% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-variable-constraint.R
\name{RAVEVariableConstraints}
\alias{RAVEVariableConstraints}
\title{Class definition for 'RAVE' variable constraints}
\value{
Initialized instance

Formatted characters

Either \code{TRUE} if passed or a collection of assertion
failures (or errors)

\code{TRUE} if valid, otherwise returns the error message

A list of constraint data that can be passed into
\code{$restore} method

\code{RAVEVariableConstraints} instance
}
\description{
See \code{\link{new_constraints}} for constructor function.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{type}}{\code{character(1)}, type indicator}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{n_validators}}{Number of validation functions}

\item{\code{isRAVEVariableConstraints}}{always true}

\item{\code{generator}}{class definition}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RAVEVariableConstraints-new}{\code{RAVEVariableConstraints$new()}}
\item \href{#method-RAVEVariableConstraints-format}{\code{RAVEVariableConstraints$format()}}
\item \href{#method-RAVEVariableConstraints-assert}{\code{RAVEVariableConstraints$assert()}}
\item \href{#method-RAVEVariableConstraints-check}{\code{RAVEVariableConstraints$check()}}
\item \href{#method-RAVEVariableConstraints-store}{\code{RAVEVariableConstraints$store()}}
\item \href{#method-RAVEVariableConstraints-restore}{\code{RAVEVariableConstraints$restore()}}
\item \href{#method-RAVEVariableConstraints-clone}{\code{RAVEVariableConstraints$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableConstraints-new"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableConstraints-new}{}}}
\subsection{Method \code{new()}}{
Constructor method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableConstraints$new(type = "UnboundedConstraint", assertions = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{type of the variable; default is \code{'UnboundedConstraint'}}

\item{\code{assertions}}{named list of the constraint parameters. The names of
\code{assertions} will be used to indicate the constraint
type, and the values are the constraint parameters.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableConstraints-format"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableConstraints-format}{}}}
\subsection{Method \code{format()}}{
Format method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableConstraints$format(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableConstraints-assert"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableConstraints-assert}{}}}
\subsection{Method \code{assert()}}{
Validate the constraints
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableConstraints$assert(
  x,
  .var.name = checkmate::vname(x),
  on_error = c("error", "warning", "message", "muffle"),
  env = parent.frame(),
  data = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{value to validate}

\item{\code{.var.name}}{descriptive name of \code{x}}

\item{\code{on_error}}{error handler, default is \code{'error'}:
stop on first validation error}

\item{\code{env}}{environment of validation (used when assertions are
expressions)}

\item{\code{data}}{named list of additional data to be used for evaluation if
constraint is an expression}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableConstraints-check"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableConstraints-check}{}}}
\subsection{Method \code{check()}}{
Check if the value is valid with no error raised
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableConstraints$check(x, env = parent.frame(), data = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{valid to be validated}

\item{\code{env}}{environment to evaluate validation expressions}

\item{\code{data}}{named list of additional data to be used for evaluation if
constraint is an expression}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableConstraints-store"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableConstraints-store}{}}}
\subsection{Method \code{store()}}{
Convert constraint to atomic list, used for serializing
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableConstraints$store(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableConstraints-restore"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableConstraints-restore}{}}}
\subsection{Method \code{restore()}}{
Restores from atomic list generated by \code{$store()}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableConstraints$restore(x, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{atomic list}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RAVEVariableConstraints-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RAVEVariableConstraints-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RAVEVariableConstraints$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
